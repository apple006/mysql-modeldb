/**
 * This class is generated by jOOQ
 */
package jooq.sqlite.gen.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.sqlite.gen.Keys;
import jooq.sqlite.gen.ModeldbTest;
import jooq.sqlite.gen.tables.records.TreemodelRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Treemodel extends TableImpl<TreemodelRecord> {

    private static final long serialVersionUID = -699545323;

    /**
     * The reference instance of <code>modeldb_test.TreeModel</code>
     */
    public static final Treemodel TREEMODEL = new Treemodel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TreemodelRecord> getRecordType() {
        return TreemodelRecord.class;
    }

    /**
     * The column <code>modeldb_test.TreeModel.id</code>.
     */
    public final TableField<TreemodelRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.TreeModel.model</code>.
     */
    public final TableField<TreemodelRecord, Integer> MODEL = createField("model", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.TreeModel.modelType</code>.
     */
    public final TableField<TreemodelRecord, String> MODELTYPE = createField("modelType", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>modeldb_test.TreeModel</code> table reference
     */
    public Treemodel() {
        this("TreeModel", null);
    }

    /**
     * Create an aliased <code>modeldb_test.TreeModel</code> table reference
     */
    public Treemodel(String alias) {
        this(alias, TREEMODEL);
    }

    private Treemodel(String alias, Table<TreemodelRecord> aliased) {
        this(alias, aliased, null);
    }

    private Treemodel(String alias, Table<TreemodelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ModeldbTest.MODELDB_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TreemodelRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TREEMODEL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TreemodelRecord> getPrimaryKey() {
        return Keys.KEY_TREEMODEL_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TreemodelRecord>> getKeys() {
        return Arrays.<UniqueKey<TreemodelRecord>>asList(Keys.KEY_TREEMODEL_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TreemodelRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TreemodelRecord, ?>>asList(Keys.TREEMODEL_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Treemodel as(String alias) {
        return new Treemodel(alias, this);
    }

    /**
     * Rename this table
     */
    public Treemodel rename(String name) {
        return new Treemodel(name, null);
    }
}
