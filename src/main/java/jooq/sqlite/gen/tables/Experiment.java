/**
 * This class is generated by jOOQ
 */
package jooq.sqlite.gen.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.sqlite.gen.Keys;
import jooq.sqlite.gen.ModeldbTest;
import jooq.sqlite.gen.tables.records.ExperimentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Experiment extends TableImpl<ExperimentRecord> {

    private static final long serialVersionUID = -1484400981;

    /**
     * The reference instance of <code>modeldb_test.Experiment</code>
     */
    public static final Experiment EXPERIMENT = new Experiment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExperimentRecord> getRecordType() {
        return ExperimentRecord.class;
    }

    /**
     * The column <code>modeldb_test.Experiment.id</code>.
     */
    public final TableField<ExperimentRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.Experiment.project</code>.
     */
    public final TableField<ExperimentRecord, Integer> PROJECT = createField("project", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.Experiment.name</code>.
     */
    public final TableField<ExperimentRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.Experiment.description</code>.
     */
    public final TableField<ExperimentRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>modeldb_test.Experiment.created</code>.
     */
    public final TableField<ExperimentRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>modeldb_test.Experiment</code> table reference
     */
    public Experiment() {
        this("Experiment", null);
    }

    /**
     * Create an aliased <code>modeldb_test.Experiment</code> table reference
     */
    public Experiment(String alias) {
        this(alias, EXPERIMENT);
    }

    private Experiment(String alias, Table<ExperimentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Experiment(String alias, Table<ExperimentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ModeldbTest.MODELDB_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ExperimentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EXPERIMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ExperimentRecord> getPrimaryKey() {
        return Keys.KEY_EXPERIMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ExperimentRecord>> getKeys() {
        return Arrays.<UniqueKey<ExperimentRecord>>asList(Keys.KEY_EXPERIMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ExperimentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ExperimentRecord, ?>>asList(Keys.EXPERIMENT_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Experiment as(String alias) {
        return new Experiment(alias, this);
    }

    /**
     * Rename this table
     */
    public Experiment rename(String name) {
        return new Experiment(name, null);
    }
}
