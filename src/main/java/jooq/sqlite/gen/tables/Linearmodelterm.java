/**
 * This class is generated by jOOQ
 */
package jooq.sqlite.gen.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.sqlite.gen.Keys;
import jooq.sqlite.gen.ModeldbTest;
import jooq.sqlite.gen.tables.records.LinearmodeltermRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Linearmodelterm extends TableImpl<LinearmodeltermRecord> {

    private static final long serialVersionUID = -44014583;

    /**
     * The reference instance of <code>modeldb_test.LinearModelTerm</code>
     */
    public static final Linearmodelterm LINEARMODELTERM = new Linearmodelterm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LinearmodeltermRecord> getRecordType() {
        return LinearmodeltermRecord.class;
    }

    /**
     * The column <code>modeldb_test.LinearModelTerm.id</code>.
     */
    public final TableField<LinearmodeltermRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.LinearModelTerm.model</code>.
     */
    public final TableField<LinearmodeltermRecord, Integer> MODEL = createField("model", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.LinearModelTerm.termIndex</code>.
     */
    public final TableField<LinearmodeltermRecord, Integer> TERMINDEX = createField("termIndex", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.LinearModelTerm.coefficient</code>.
     */
    public final TableField<LinearmodeltermRecord, Double> COEFFICIENT = createField("coefficient", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>modeldb_test.LinearModelTerm.tStat</code>.
     */
    public final TableField<LinearmodeltermRecord, Double> TSTAT = createField("tStat", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>modeldb_test.LinearModelTerm.stdErr</code>.
     */
    public final TableField<LinearmodeltermRecord, Double> STDERR = createField("stdErr", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>modeldb_test.LinearModelTerm.pValue</code>.
     */
    public final TableField<LinearmodeltermRecord, Double> PVALUE = createField("pValue", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * Create a <code>modeldb_test.LinearModelTerm</code> table reference
     */
    public Linearmodelterm() {
        this("LinearModelTerm", null);
    }

    /**
     * Create an aliased <code>modeldb_test.LinearModelTerm</code> table reference
     */
    public Linearmodelterm(String alias) {
        this(alias, LINEARMODELTERM);
    }

    private Linearmodelterm(String alias, Table<LinearmodeltermRecord> aliased) {
        this(alias, aliased, null);
    }

    private Linearmodelterm(String alias, Table<LinearmodeltermRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ModeldbTest.MODELDB_TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LinearmodeltermRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LINEARMODELTERM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LinearmodeltermRecord> getPrimaryKey() {
        return Keys.KEY_LINEARMODELTERM_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LinearmodeltermRecord>> getKeys() {
        return Arrays.<UniqueKey<LinearmodeltermRecord>>asList(Keys.KEY_LINEARMODELTERM_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<LinearmodeltermRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LinearmodeltermRecord, ?>>asList(Keys.LINEARMODELTERM_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Linearmodelterm as(String alias) {
        return new Linearmodelterm(alias, this);
    }

    /**
     * Rename this table
     */
    public Linearmodelterm rename(String name) {
        return new Linearmodelterm(name, null);
    }
}
